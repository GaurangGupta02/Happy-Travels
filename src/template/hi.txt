<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Happy Travels Booking</title>
    <style>
        /* Global Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }

        /* Header Styles */
        h1 {
            text-align: center;
            color: #333;
            margin-top: 20px;
        }

        /* Form Styles */
        form {
            max-width: 500px;
            margin: 40px auto;
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;
            margin-bottom: 10px;
        }

        input[type="text"], input[type="email"], input[type="number"] {
            width: 100%;
            height: 40px;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        input[type="radio"] {
            margin-right: 10px;
        }

        button[type="submit"] {
            width: 100%;
            height: 40px;
            background-color: #4CAF50;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button[type="submit"]:hover {
            background-color: #3e8e41;
        }

        /* Flash Message Styles */
        ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        li {
            background-color: #f0f0f0;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

        li strong {
            color: #666;
        }
    </style>
</head>
<body>
    <h1>Happy Travels Booking Form</h1>

    <!-- Display flash messages -->
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <ul>
            {% for message in messages %}
                <li><strong>{{ message }}</strong></li>
            {% endfor %}
            </ul>
        {% endif %}
    {% endwith %}

    <form method="POST">
        <label for="name">Name:</label>
        <input type="text" name="name" required><br><br>

        <label for="phone">Phone:</label>
        <input type="text" name="phone" required><br><br>

        <label for="email">Email:</label>
        <input type="email" name="email" required><br><br>

        <label for="gender">Gender:</label>
        <input type="text" name="gender" required><br><br>

        <label for="age">Age:</label>
        <input type="number" name="age" required><br><br>

        <label for="payment">Amount Paid:</label>
        <input type="number" name="payment" required><br><br>

        <label for="meal_preference">Meal Preference:</label><br>
        <input type="radio" name="meal_preference" value="Breakfast"> Breakfast<br>
        <input type="radio" name="meal_preference" value="Lunch"> Lunch<br>
        <input type="radio" name="meal_preference" value="Dinner"> Dinner<br>
        <input type="radio" name="meal_preference" value="All"> All of the above<br>
        <input type="radio" name="meal_preference" value="None"> None<br><br>

        <label for="rating">Please give us a rating (0 to 5):</label>
        <input type="range" name="rating" min="0" max="5" step="1"><br><br>

        <button type="submit">Apply</button>
    </form>
</body>
</html>




new flask 
from flask import Flask, render_template, request, flash
from your_form_handling_module import handle_form_submission  # Import your form handling function

app = Flask(__name__)
app.secret_key = "your_secret_key"  # Set a secret key for flash messages

@app.route('/booking', methods=['GET', 'POST'])
def booking():
    if request.method == 'POST':
        # Handle form submission
        form_data = request.form
        try:
            handle_form_submission(form_data)
            flash("Form submitted successfully!", "success")
            return render_template('success.html')
        except Exception as e:
            flash("Error submitting form: {}".format(str(e)), "danger")
            return render_template('booking.html')
    else:
        return render_template('booking.html')

if __name__ == '__main__':
    app.run()



old flask

from flask import Flask, render_template, request, redirect, url_for, flash
import pymongo

# Initialize Flask app
app = Flask(__name__,template_folder='C:\\Users\\Gaurang\\Desktop\\happytravels\\template')
app.secret_key = "your_secret_key"  # Secret key for flashing messages

# Connect to MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")  # Use your MongoDB URI here
db = client['travel']  # Database name
collection = db['customer_records']  # Collection name

# Define route for the booking form
@app.route('/', methods=['GET', 'POST'])
def booking_form():
    if request.method == 'POST':
        # Extract form data
        customer_data = {
            'name': request.form['name'],
            'phone': request.form['phone'],
            'email': request.form['email'],
            'gender': request.form['gender'],
            'age': request.form['age'],
            'payment': request.form['payment'],
            'meal_preference': request.form['meal_preference'],
            'rating': request.form['rating']
        }
        
        # Insert into MongoDB
        collection.insert_one(customer_data)
        
        # Flash a success message
        flash(f"Booking Confirmed for {customer_data['name']}!")
        
        # Optionally save to a text file
        with open("record.txt", "a") as f:
            f.write(str(customer_data) + "\n")
        
        return redirect(url_for('booking_form'))

    return render_template('booking_form.html')

if __name__ == '__main__':
    app.run(debug=True)



old flask

from flask import Flask, render_template, request, redirect, url_for, flash
import pymongo

# Initialize Flask app
app = Flask(__name__,template_folder='C:\\Users\\Gaurang\\Desktop\\happytravels\\new\\template')
app.secret_key = "your_secret_key"  # Secret key for flashing messages

# Connect to MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")  # Use your MongoDB URI here
db = client['travel']  # Database name
collection = db['customer_records']  # Collection name

# Define route for the booking form
@app.route('/', methods=['GET', 'POST'])
def booking_form():
    if request.method == 'POST':
        # Extract form data
        customer_data = {
            'name': request.form['name'],
            'phone': request.form['phone'],
            'email': request.form['email'],
            'gender': request.form['gender'],
            'age': request.form['age'],
            'payment': request.form['payment'],
            'meal_preference': request.form['meal_preference'],
            'rating': request.form['rating']
        }
        
        # Insert into MongoDB
        collection.insert_one(customer_data)
        
        # Flash a success message
        flash(f"Booking Confirmed for {customer_data['name']}!")
        return render_template('booking_form.html')
        
        # Optionally save to a text file
        with open("record.txt", "a") as f:
            f.write(str(customer_data) + "\n")
        
        return redirect(url_for('booking_form')) 

    return render_template('booking_form.html')

      

if __name__ == '__main__':
    app.run(debug=True)









vdsvsdv.



from flask import Flask, render_template, request, redirect, url_for, flash
import pymongo

# Initialize Flask app
app = Flask(__name__, template_folder='C:\\Users\\Gaurang\\Desktop\\happytravels\\template')
app.secret_key = "your_secret_key"  # Secret key for flashing messages

# Connect to MongoDB
try:
    client = pymongo.MongoClient("mongodb://localhost:27017/")  # Use your MongoDB URI here
    db = client['travel']  # Database name
    collection = db['customer_records']  # Collection name
    print("Connected to MongoDB successfully!")
except Exception as e:
    print(f"Failed to connect to MongoDB: {e}")

# Define route for the home page (root URL)
@app.route('/')
def home():
    return render_template('home.html')  # Render the home page

# Define route for the booking form
@app.route('/booking', methods=['GET', 'POST'])
def booking_form():
    if request.method == 'POST':
        # Extract form data
        customer_data = {
            'name': request.form['name'],
            'phone': request.form['phone'],
            'email': request.form['email'],
            'gender': request.form['gender'],
            'age': request.form['age'],
            'payment': request.form['payment'],
            'meal_preference': request.form['meal_preference'],
            'rating': request.form['rating']
        }
        
        # Insert into MongoDB
        collection.insert_one(customer_data)
        
        # Flash a success message
        flash(f"Booking Confirmed for {customer_data['name']}!")
        return redirect(url_for('success'))  # Redirect to success route

    return render_template('booking_form.html')  # Ensure this file is in the templates folder

# Define route for the success page
@app.route('/success')
def success():
    return render_template('success.html')  # Render the success page template

# Define route for the contact page
@app.route('/contact')
def contact():
    return render_template('contact.html')  # Render the contact page template

# Run the application
if __name__ == '__main__':
    app.run(debug=True)




old booking form

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Happy Travels Booking</title>
    <style>
        /* Global Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }

        /* Header Styles */
        h1 {
            text-align: center;
            color: #333;
            margin-top: 20px;
        }

        /* Form Styles */
        form {
            max-width: 800px; /* Increased the width to 800px */
            margin: 40px auto;
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;
            margin-bottom: 10px;
        }

        input[type="text"], input[type="email"], input[type="number"] {
            width: 95%;
            height: 40px;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        input[type="radio"] {
            margin-right: 10px;
        }

        button[type="submit"] {
            width: 100%;
            height: 40px;
            background-color: #4CAF50;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button[type="submit"]:hover {
            background-color: #3e8e41;
        }

        /* Navigation Bar Styles */
        .navbar {
            background-color: #333;
            overflow: hidden;
        }

        .navbar a {
            float: left;
            display: block;
            color: white;
            text-align: center;
            padding: 14px 20px;
            text-decoration: none;
        }

        .navbar a:hover {
            background-color: #ddd;
            color: black;
        }
        #otp-section {
            display: none; /* Initially hide OTP section */
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <div class="navbar">
        <div class="navbar">
            <a href="{{ url_for('home') }}">Home</a>
            <a href="{{ url_for('booking_form') }}">Booking Form</a>
            <a href="{{ url_for('contact') }}">Contact</a>
        </div>
    </div>

    
    <h1>Happy Travels Booking Form</h1>

    <form method="POST" >
        <label for="name">Name:</label>
        <input type="text" name="name" required><br><br>

        <label for="phone">Phone:</label>
        <input type="text" name="phone" required><br><br>

        <label for="email">Email:</label>
        <input type="email" name="email" required><br><br>

        <label for="gender">Gender:</label>
        <input type="text" name="gender" required><br><br>

        <label for="age">Age:</label>
        <input type="number" name="age" required><br><br>

        <label for="payment">Amount Paid:</label>
        <input type="number" name="payment" required><br><br>

        <label for="meal_preference">Meal Preference:</label><br>
        <input type="radio" name="meal_preference" value="Breakfast"> Breakfast<br>
        <input type="radio" name="meal_preference" value="Lunch"> Lunch<br>
        <input type="radio" name="meal_preference" value="Dinner"> Dinner<br>
        <input type="radio" name="meal_preference" value="All"> All of the above<br>
        <input type="radio" name="meal_preference" value="None"> None<br><br>

        <label for="rating">Please give us a rating (0 to 5):</label>
        <input type="range" name="rating" min="0" max="5" step="1"><br><br>

        <a href="success.html"><button type="submit">Apply</button></a>
    </form>
    <div id="otp-section"></div>
        <form id="otp-form" method="POST" action="{{ url_for('verify_otp') }}">
            <label for="otp">Enter OTP:</label>
            <input type="number" name="otp" required>
            <button type="submit">Verify OTP</button>
        </form>
    </div>
    <script>
        // Show OTP Section
        function showOtpSection() {
            // Prevent default form submission
            event.preventDefault();
            
            // Submit the form data using AJAX to get OTP
            var form = document.getElementById('booking-form');
            var formData = new FormData(form);
            
            fetch(form.action, {
                method: 'POST',
                body: formData
            }).then(response => {
                return response.json();  // Expecting a JSON response
            }).then(data => {
                if (data.success) {
                    document.getElementById('otp-section').style.display = 'block';  // Show OTP section
                } else {
                    alert(data.message);  // Show error message if any
                }
            }).catch(error => {
                console.error('Error:', error);
            });
        }
    </script>
</body>
</html>




otp flask 

from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session
import random
import pymongo
from flask_session import Session
from datetime import datetime, timedelta
from twilio.rest import Client
import re  # Import regex for phone number validation

# Initialize Flask app
app = Flask(__name__, template_folder='C:\\Users\\Gaurang\\Desktop\\happytravels\\template')
app.secret_key = "your_secret_key"
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Twilio configuration (replace with your Twilio account SID, Auth Token, and phone number)
account_sid = 'ACe0482d8d9e35b3a137e21cebdf5e9292'
auth_token = '1f71331025c82ede7c71f68400bbe65f'
twilio_phone_number = '+916394865525'  # Make sure this number is a valid Twilio number in E.164 format
client = Client(account_sid, auth_token)

# Connect to MongoDB
try:
    client_mongo = pymongo.MongoClient("mongodb://localhost:27017/")
    db = client_mongo['travel']
    collection = db['customer_records']
    print("Connected to MongoDB successfully!")
except Exception as e:
    print(f"Failed to connect to MongoDB: {e}")

# Home route
@app.route('/')
def home():
    return render_template('home.html')

# Booking form route
@app.route('/booking_form', methods=['GET', 'POST'])
def booking_form():
    if request.method == 'GET':
        # Render the booking form when accessing the page
        return render_template('booking_form.html')

    if request.method == 'POST':
        # Handle form submission and OTP generation
        customer_data = {
            'name': request.form['name'],
            'phone': request.form['phone'],
            'email': request.form['email'],
            'gender': request.form['gender'],
            'age': request.form['age'],
            'payment': request.form['payment'],
            'meal_preference': request.form['meal_preference'],
            'rating': request.form.get('rating', 0)
        }

        # Validate and format phone number
        phone_number = customer_data['phone']
        print(f"Original phone number entered: {phone_number}")

        # Ensure the phone number contains the country code and is in the correct format
        if not re.match(r'^\+?\d{10,15}$', phone_number):
            return jsonify({'success': False, 'message': "Invalid phone number format. Please enter a valid number."})

        # Automatically ensure the phone number has the correct country code
        if phone_number.startswith('+'):
            customer_data['phone'] = phone_number  # Already in E.164 format
        else:
            customer_data['phone'] = f'+91{phone_number}'  # Add +91 as the default country code

        phone_number = customer_data['phone']  # Update phone_number variable for later use
        print(f"Formatted phone number with country code: {phone_number}")

        # Generate OTP and store it in the session
        otp = random.randint(100000, 999999)
        session['otp'] = otp
        session['customer_data'] = customer_data
        session['otp_time'] = datetime.now()

        try:
            # Send OTP using Twilio
            print(f"Sending message from {twilio_phone_number} to {phone_number}")
            message = client.messages.create(
                body=f"Your OTP is {otp}. Please enter this to confirm your booking.",
                from_=twilio_phone_number,
                to=phone_number
            )
            print(f"Message sent with SID: {message.sid}")
            return jsonify({'success': True, 'message': "OTP sent successfully!"})
        except Exception as e:
            print(f"Failed to send OTP: {e}")  # Log the error message
            return jsonify({'success': False, 'message': f"Failed to send OTP: {e}"})

# OTP verification route
@app.route('/verify_otp', methods=['POST'])
def verify_otp():
    entered_otp = request.form['otp']
    if 'otp' in session:
        # Check if OTP is still valid (e.g., valid for 5 minutes)
        if datetime.now() - session.get('otp_time', datetime.now()) > timedelta(minutes=5):
            flash("OTP has expired. Please request a new one.")
            return redirect(url_for('booking_form'))

        if int(entered_otp) == session['otp']:
            customer_data = session['customer_data']

            # Add a booking ID to the customer data
            customer_data['booking_id'] = random.randint(10000, 99999)

            # Store data in MongoDB
            collection.insert_one(customer_data)
            flash(f"Booking Confirmed for {customer_data['name']}!")

            # Clear session and redirect to receipt
            session.pop('otp', None)
            session.pop('customer_data', None)
            session.pop('otp_time', None)
            return redirect(url_for('generate_receipt'))
        else:
            flash("Invalid OTP. Please try again.")
    else:
        flash("No OTP found. Please request a new one.")

    return redirect(url_for('booking_form'))

# Route to render receipt
@app.route('/receipt')
def generate_receipt():
    # Retrieve customer data from session
    if 'customer_data' in session:
        customer_data = session['customer_data']
        return render_template('receipt.html', customer_data=customer_data)
    else:
        flash("No booking information available.")
        return redirect(url_for('home'))

@app.route('/contact')
def contact():
    return render_template('contact.html')

if __name__ == '__main__':
    app.run(debug=True)
    print(app.url_map)
